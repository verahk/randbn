% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_node_to_bn.R
\name{add_node_to_bn}
\alias{add_node_to_bn}
\alias{add_parent_to_child}
\alias{new_node}
\title{Add a new node to a Bayesian network}
\usage{
add_node_to_bn(bn, node, generate_local_dist = randbn::rand_cpt, ...)

add_parent_to_child(
  child_node,
  parent_node,
  generate_local_dist = randbn::rand_cpt,
  ...
)

new_node(name, parents = character(0), children = character(0), prob)
}
\arguments{
\item{bn}{\code{bnlearn::bn.fit} object. Currently only discrete networks.}

\item{generate_local_dist}{function that generates a CPT.
First argument is assumed to be the dimension of the new rows in the CPT,
\code{c(r, q, s-1)}, where \code{r} is the cardinality of \code{child_node}, \code{q} the number
of configurations of the current parent set and \code{s} the cardinality of the new parent.
By default, \code{generate_local_dist = rand_cpt}.}

\item{...}{additional arguments to \code{generate_local_dist}.}

\item{child_node, parent_node}{\code{bn.fit.dnode} objects representing the child and its new parent.}

\item{name}{name of new node}

\item{parents}{name of parents}

\item{children}{name of children}

\item{prob}{an array with named dimensions, representing the local distributions of the node.}

\item{new_node}{a \code{bnlearn::bn.fit.dnode} object}
}
\value{
\code{add_node_to_bn()} returns a \link[bnlearn:bn.fit]{bnlearn::bn.fit} object, where \code{node} is added to the original object \code{bn}.

\code{add_parent_to_child()} returns a \link[bnlearn:bn.fit.class]{bnlearn::bn.fit.dnode} object, where the set of local
distributions is expanded to include also the new parent.

\code{new_node()} returns a \link[bnlearn:bn.fit.class]{bnlearn::bn.fit.dnode} object
}
\description{
Augment a bn.fit object with a new node. Iterate trough all children of the
new node and add local distributions for each configuration of the new node.
}
\examples{
# initialize bn-object with a single node 
bn <- rand_bn(2, 0, type = "cat", nlev = c(2, 3))
ls.str(bn)

# generate a new node 
name <- "X3"
parents <- "X1"
children <- "X2"
prob <- rand_cpt(dims = c(4, 2), alpha = 1, scope = c(name, parents))
dimnames(prob)   # CPT must have dimnames
node <- new_node(name, parents, children, prob)
class(node)
node

# add node to bn 
bn2 <- add_node_to_bn(bn, node)
ls.str(bn2)
bnlearn::amat(bn2)

# the new DAG structure is checked with pcalg::isValidGraph
node <- new_node(name, parents, children = parents, prob)
add_node_to_bn(bn, node) # returns NULL + message from pcalg::isValidGraph

# add new parent to a node 
child_node <- bn$X2
parent_node <- new_node(name, parents, children, prob)
new_child_node <- add_parent_to_child(child_node, parent_node)

ls.str(child_node)
ls.str(new_child_node)  # same local distribution for the first parent configurations
}
